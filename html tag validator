class Array:
    def __init__(self,array_size=1):
        self.count=0  #the actual number of item in the array
        self.array_size=array_size   #the alocated size of array
        self.Array=[None]*array_size
    def print(self):
        print(self.Array)
    def isEmpty(self):
        if self.count==0:
            return True
        return False

    def append(self,value):
        if self.count==self.array_size:
            raise Exception("Array is full")
        else:
            self.Array[self.count]=value
            self.count+=1
    def insert(self,value,index):
        for i in range(self.count-1,index-1,-1):
            self.Array[i+1]=self.Array[i]
        self.Array[index]=value
        self.count+=1
    def pop(self):
        if self.isEmpty():
            raise Exception("Array is empty")

        else:
            value=self.Array[self.count-1]
            self.Array[self.count-1] = None
            self.count-=1
            return value

    def remove(self,index):
        if self.isEmpty():
            raise Exception("Array is empty")
        else:
            self.Array[index] = None
            for i in range(index,self.array_size):
                self.Array[i]=self.Array[i+1]
            self.count-=1
    def get(self, index):
        return self.Array[index]

class Stack:

    def __init__(self, size, data_type):
        self.stack = Array(size, data_type)
        self.size = size
        self.data_type = data_type

    def length(self):
        return self.stack.count

    def isEmpty(self):
        return self.stack.isEmpty()
    def push(self, value):
        self.stack.append(value)

    def pop(self):
        return self.pop()

    def peek(self):
        return self.stack.get(self.stack.count - 1)

class Html_Tag_validator:

    def Html_validito(self,Html_file):
        with open(htmlFile, "r") as LINE:
            LINE = LINE.readlines()
            LINE_JOINED = "".join(LINE).replace("\n", "")

            first_index = LINE_JOINED.find("<")
            stack = Stack()

            while first_index != -1:
                end_tag_index = LINE_JOINED.find(">", first_index + 1)

                if end_tag_index < 0:
                    current_index = first_index

                    first_index = 0
                    for line_number, line in enumerate(LINE):
                        first_index += len(line) - 1
                        if first_index >= current_index:
                            break
                    return 'problem at line: {}'.format(line_number + 1)

                content = LINE_JOINED[first_index + 1: end_tag_index].split()
                tag_name = content[0]
                if not tag_name.startswith("!--") and not tag_name.endswith("/"):
                    if tag_name.find("/") == -1:
                        stack.push(tag_name)
                    else:
                        if stack.isEmpty() or stack.pop() != tag_name.replace("/", ""):
                            current_index = end_tag_index

                            first_index = 0
                            for line_number, line in enumerate(LINE):
                                first_index += len(line) - 1
                                if first_index >= current_index:
                                    break
                            return 'problem at line: {}'.format(line_number + 1)

                first_index = LINE_JOINED.find("<", end_tag_index + 1)
        






